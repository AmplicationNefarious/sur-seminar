/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { CreateRenterArgs } from "./CreateRenterArgs";
import { UpdateRenterArgs } from "./UpdateRenterArgs";
import { DeleteRenterArgs } from "./DeleteRenterArgs";
import { RenterFindManyArgs } from "./RenterFindManyArgs";
import { RenterFindUniqueArgs } from "./RenterFindUniqueArgs";
import { Renter } from "./Renter";
import { ApartmentFindManyArgs } from "../../apartment/base/ApartmentFindManyArgs";
import { Apartment } from "../../apartment/base/Apartment";
import { RenterService } from "../renter.service";

@graphql.Resolver(() => Renter)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RenterResolverBase {
  constructor(
    protected readonly service: RenterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Renter",
    action: "read",
    possession: "any",
  })
  async _rentersMeta(
    @graphql.Args() args: RenterFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Renter])
  @nestAccessControl.UseRoles({
    resource: "Renter",
    action: "read",
    possession: "any",
  })
  async renters(@graphql.Args() args: RenterFindManyArgs): Promise<Renter[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Renter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Renter",
    action: "read",
    possession: "own",
  })
  async renter(
    @graphql.Args() args: RenterFindUniqueArgs
  ): Promise<Renter | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Renter)
  @nestAccessControl.UseRoles({
    resource: "Renter",
    action: "create",
    possession: "any",
  })
  async createRenter(@graphql.Args() args: CreateRenterArgs): Promise<Renter> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Renter)
  @nestAccessControl.UseRoles({
    resource: "Renter",
    action: "update",
    possession: "any",
  })
  async updateRenter(
    @graphql.Args() args: UpdateRenterArgs
  ): Promise<Renter | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Renter)
  @nestAccessControl.UseRoles({
    resource: "Renter",
    action: "delete",
    possession: "any",
  })
  async deleteRenter(
    @graphql.Args() args: DeleteRenterArgs
  ): Promise<Renter | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [Apartment])
  async apartments(
    @graphql.Parent() parent: Renter,
    @graphql.Args() args: ApartmentFindManyArgs
  ): Promise<Apartment[]> {
    const results = await this.service.findApartments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
