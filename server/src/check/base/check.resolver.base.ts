/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCheckArgs } from "./CreateCheckArgs";
import { UpdateCheckArgs } from "./UpdateCheckArgs";
import { DeleteCheckArgs } from "./DeleteCheckArgs";
import { CheckFindManyArgs } from "./CheckFindManyArgs";
import { CheckFindUniqueArgs } from "./CheckFindUniqueArgs";
import { Check } from "./Check";
import { Reservation } from "../../reservation/base/Reservation";
import { CheckService } from "../check.service";

@graphql.Resolver(() => Check)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CheckResolverBase {
  constructor(
    protected readonly service: CheckService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Check",
    action: "read",
    possession: "any",
  })
  async _checksMeta(
    @graphql.Args() args: CheckFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Check])
  @nestAccessControl.UseRoles({
    resource: "Check",
    action: "read",
    possession: "any",
  })
  async checks(@graphql.Args() args: CheckFindManyArgs): Promise<Check[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Check, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Check",
    action: "read",
    possession: "own",
  })
  async check(
    @graphql.Args() args: CheckFindUniqueArgs
  ): Promise<Check | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Check)
  @nestAccessControl.UseRoles({
    resource: "Check",
    action: "create",
    possession: "any",
  })
  async createCheck(@graphql.Args() args: CreateCheckArgs): Promise<Check> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        idReservation: {
          connect: args.data.idReservation,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Check)
  @nestAccessControl.UseRoles({
    resource: "Check",
    action: "update",
    possession: "any",
  })
  async updateCheck(
    @graphql.Args() args: UpdateCheckArgs
  ): Promise<Check | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          idReservation: {
            connect: args.data.idReservation,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Check)
  @nestAccessControl.UseRoles({
    resource: "Check",
    action: "delete",
    possession: "any",
  })
  async deleteCheck(
    @graphql.Args() args: DeleteCheckArgs
  ): Promise<Check | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Reservation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  async idReservation(
    @graphql.Parent() parent: Check
  ): Promise<Reservation | null> {
    const result = await this.service.getIdReservation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
